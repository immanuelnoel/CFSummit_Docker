Demo 1: Base ColdFusion Image

	// Building ColdFusion Standalone Image
	cd standalone 
	// Update installer path in build.sh
	./build.sh

	// Building ColdFusion Addons Image
	cd addons
	// Update installer path in build.sh
	./build.sh
	
	// Try ColdFusion Standalone
	// Non persistent
	docker run --rm -it coldfusion:2016.0.5 help // Lists supported commands and environment variables
	
	docker run --rm -it coldfusion:2016.0.5 info
	docker run --rm -it -v C:/wwwroot/:/app coldfusion:2016.0.5 cli test.cfm
	
	// Persistent Daemon
	docker run -dt -P -v c:/wwwroot/:/app -e password=ColdFusion123 -e enableSecureProfile=true coldfusion:2016.0.5
	
	// Access CFM pages at http://localhost:8000
	
	../reset.bat

Demo 2: Building Applications with Docker. 

	// Docker Compose
	// MySQL DataSource registration with JAR inclusion. 
	// Environment variables in a files
	// ADmin API for datasource creation
	
	cp setupColdFusion.cfm /opt/wwwroot/
	docker-compose -f docker-compose-win.yml up -d // Linux: docker-compose up -d
	
	// Access upgraded setup on http://localhost:8500
	
	../reset.bat

Demo 3: Connector configurations
	
	// Docker Compose
	// CF and Webserver two different containers, sharing same webroot
	
	docker-compose -f docker-compose-win.yml up -d // Linux: docker-compose up -d
	
	// Access CFM pages via the webserver on http://localhost:8000
	
	../reset.bat

Demo 4: Scale
	
	// Updated healthcheck
	// Solr / PDF on a seperate container
	// External Session Storage - Redis
	// Connector to Apache
		
	// Other options: Mount jvm.config / neo.xml files directly. Upgrade JRE to the latest 
		
	docker swarm init
	docker stack deploy -c docker-compose-win.yml cfscale // Linux: docker stack deploy -c docker-compose.yml cfscale

	// Access CFM pages via the webserver on http://localhost:8000

demo5: In-Place Upgrade - Upgrade to CF Aether
	
	// Ports locked down. Only webserver open
	// Upgrade to ColdFusion Aether
	
	// Other options: COPY source to the image during build. Avoid mounting volumes. 

	cd app/
	docker build -t app .
	
	docker stack deploy -c docker-compose-win.yml --with-registry-auth cfscale // Linux: docker stack deploy -c docker-compose.yml --with-registry-auth cfscale

	// Access the upgraded app on http://localhost:8000

	docker stack rm cfscale

demo6: API Manager

	// API Manager and its addon service on seperate containers
	// One image for addon services. The service to startup is specified in the environment variables file

	cd standalone
	// Update build.sh. Point to the installer
	./build.sh
	
	cd addons
	// Update build.sh. Point to the installer
	./build.sh
	
	docker run --rm -it apimanager:2016.0.1 help // Standalone: Lists supported commands and environment variables
	docker run --rm -it apimanager:2016.0.1-addons help // Addons: Lists supported commands and environment variables
	
	docker-compose -f docker-compose-win.yml up -d // Linux: docker-compose up -d 

	http://localhost:9000/portal
	Sample Swagger: http://petstore.swagger.io/v2/swagger.json
